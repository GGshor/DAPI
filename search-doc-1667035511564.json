[{"title":"RoCord","type":0,"sectionRef":"#","url":"api/RoCord","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"RoCord","url":"api/RoCord#functions","content":" "},{"title":"new​","type":1,"pageTitle":"RoCord","url":"api/RoCord#new","content":"&lt;/&gt; RoCord.new( webhookURL: string-- The webhook url, can be a proxy but needs to support get and post requests ) → RoCord Creates a new webhook setup.  "},{"title":"AddEmbed​","type":1,"pageTitle":"RoCord","url":"api/RoCord#AddEmbed","content":"&lt;/&gt; RoCord:AddEmbed( title: string?,-- Title of the embed description: string?,-- Description of the embed color: Color3? -- Color of the embed ) → Embed Adds an embed to the message and returns the embed so that you can change it.  "},{"title":"SendMessage​","type":1,"pageTitle":"RoCord","url":"api/RoCord#SendMessage","content":"&lt;/&gt; RoCord:SendMessage( content: string?,-- The text of the message username: string?-- Override the username of webhook ) → () Sends the message with added embeds. If the message was send succesfully then body is cleared back to default.  "},{"title":"ChangeWebhook​","type":1,"pageTitle":"RoCord","url":"api/RoCord#ChangeWebhook","content":"&lt;/&gt; RoCord:ChangeWebhook( webhookURL: string-- The new webhook url ) → () Updates the webhook url. "},{"title":"Utils","type":0,"sectionRef":"#","url":"api/Utils","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Utils","url":"api/Utils#functions","content":" "},{"title":"CheckArgumentTypes​","type":1,"pageTitle":"Utils","url":"api/Utils#CheckArgumentTypes","content":"&lt;/&gt; Utils.CheckArgumentTypes( types: {string},-- The array with the types ...: any-- Arguments ) → () Checks if the given types are the same as arguments "},{"title":"Errors","type":1,"pageTitle":"Utils","url":"api/Utils##","content":"Type\tDescription&quot;Unexpected&quot;\tIf one of the arguments is not the same as given type it will error  "},{"title":"CheckArgumentCharacters​","type":1,"pageTitle":"Utils","url":"api/Utils#CheckArgumentCharacters","content":"&lt;/&gt; Utils.CheckArgumentCharacters( limits: {number},-- Array of limits ...: string-- Arguments ) → () Checks if the arguments doesn't go over the character limit. "},{"title":"Errors","type":1,"pageTitle":"Utils","url":"api/Utils##","content":"Type\tDescription&quot;Unexpected&quot;\tWhen character amount is above the limits  "},{"title":"CheckUrl​","type":1,"pageTitle":"Utils","url":"api/Utils#CheckUrl","content":"&lt;/&gt; Utils.CheckUrl( url: string-- The url to check ) → () Checks if the url is valid and also does get a get to be sure. "},{"title":"Errors","type":1,"pageTitle":"Utils","url":"api/Utils##","content":"Type\tDescription&quot;InvalidURL&quot;\tGiven url is invalid &quot;BadResponse&quot;\tGot bad response from url  "},{"title":"RGBtoHex​","type":1,"pageTitle":"Utils","url":"api/Utils#RGBtoHex","content":"&lt;/&gt; Utils.RGBtoHex( color: Color3 -- The color3 to transform ) → string-- The new hex value Transforms Color3 to Hex value  "},{"title":"HextoRGB​","type":1,"pageTitle":"Utils","url":"api/Utils#HextoRGB","content":"&lt;/&gt; Utils.HextoRGB( hex: string-- The hex value to transform ) → Color3 -- The new color3 value Transforms Hex value back to Color3. "},{"title":"Webhook","type":0,"sectionRef":"#","url":"api/Webhook","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Webhook","url":"api/Webhook#functions","content":" "},{"title":"CheckParams​","type":1,"pageTitle":"Webhook","url":"api/Webhook#CheckParams","content":"&lt;/&gt; Webhook.CheckParams( params: ExecuteParams-- The parameters to enforce rules on ) → () Enforces the rules on given params. "},{"title":"Errors","type":1,"pageTitle":"Webhook","url":"api/Webhook##","content":"Type\tDescription&quot;EmptyBody&quot;\tYou need at least content or embeds &quot;TooMany&quot;\tObject has too many characters or too many embeds/fields  "},{"title":"new​","type":1,"pageTitle":"Webhook","url":"api/Webhook#new","content":"&lt;/&gt; Webhook.new( webhookURL: string-- The url that redirects to your webhook. ) → Webhook-- The created webhook class Creates a new webhook object "},{"title":"Errors","type":1,"pageTitle":"Webhook","url":"api/Webhook##","content":"Type\tDescription&quot;WebhookError&quot;\tSomething went wrong while making a new webhook  "},{"title":"Update​","type":1,"pageTitle":"Webhook","url":"api/Webhook#Update","content":"&lt;/&gt; Webhook:Update( url: string-- The url to get information and execute from. (Needs Post and Get methods) ) → () Updates the webhook object and allows you to change it to a different one "},{"title":"Errors","type":1,"pageTitle":"Webhook","url":"api/Webhook##","content":"Type\tDescription&quot;ResponseFailure&quot;\tHttp service might be turned off &quot;DecodeError&quot;\tWas unable to run json decode from response  "},{"title":"Execute​","type":1,"pageTitle":"Webhook","url":"api/Webhook#Execute","content":"&lt;/&gt; Webhook:Execute( params: ExecuteParams,-- The table with all the parameters override: boolean?-- If you wish to override the checks ) → () Executes the webhook with given params. "},{"title":"Errors","type":1,"pageTitle":"Webhook","url":"api/Webhook##","content":"Type\tDescription&quot;EncodeError&quot;\tUnable to json encode the params, try running it without override &quot;ExecuteError&quot;\tIf the post pcall failed for some reason, most likely http service &quot;ParamsCheckError&quot;\tCheck parameters failed "},{"title":"Embed","type":0,"sectionRef":"#","url":"api/Embed","content":"","keywords":""},{"title":"Functions​","type":1,"pageTitle":"Embed","url":"api/Embed#functions","content":" "},{"title":"new​","type":1,"pageTitle":"Embed","url":"api/Embed#new","content":"&lt;/&gt; Embed.new( title: string?,-- Title of embed description: string?,-- The description of the embed color: Color3? ,-- The color of the embed url: string?,-- The url of the embed timestamp: DateTime?-- The timestamp of the embed ) → Embed Creates a new Embed.  "},{"title":"SetTitle​","type":1,"pageTitle":"Embed","url":"api/Embed#SetTitle","content":"&lt;/&gt; Embed:SetTitle( title: string-- The new title ) → () Sets the title of the embed.  "},{"title":"SetDescription​","type":1,"pageTitle":"Embed","url":"api/Embed#SetDescription","content":"&lt;/&gt; Embed:SetDescription( description: string-- The new description ) → () Sets description of the embed.  "},{"title":"SetURL​","type":1,"pageTitle":"Embed","url":"api/Embed#SetURL","content":"&lt;/&gt; Embed:SetURL( url: string-- The new url ) → () Sets the url of the embed.  "},{"title":"RemoveURL​","type":1,"pageTitle":"Embed","url":"api/Embed#RemoveURL","content":"&lt;/&gt; Embed:RemoveURL() → () Removes the url of the embed.  "},{"title":"SetTimestamp​","type":1,"pageTitle":"Embed","url":"api/Embed#SetTimestamp","content":"&lt;/&gt; Embed:SetTimestamp( timestamp: DateTime-- The new timestamp ) → () Sets the timestamp of the embed.  "},{"title":"RemoveTimestamp​","type":1,"pageTitle":"Embed","url":"api/Embed#RemoveTimestamp","content":"&lt;/&gt; Embed:RemoveTimestamp() → () Removes the timestamp of the embed.  "},{"title":"SetColor​","type":1,"pageTitle":"Embed","url":"api/Embed#SetColor","content":"&lt;/&gt; Embed:SetColor( color: Color3 -- The new color ) → () Sets the color of the embed.  "},{"title":"SetFooter​","type":1,"pageTitle":"Embed","url":"api/Embed#SetFooter","content":"&lt;/&gt; Embed:SetFooter( text: string,-- The text of the footer icon_url: string?,-- Adds an icon to the footer proxy_icon_url: string?-- Proxy version of icon_url ) → () Sets the footer of the embed.  "},{"title":"RemoveFooter​","type":1,"pageTitle":"Embed","url":"api/Embed#RemoveFooter","content":"&lt;/&gt; Embed:RemoveFooter() → () Removes the footer of the embed.  "},{"title":"SetImage​","type":1,"pageTitle":"Embed","url":"api/Embed#SetImage","content":"&lt;/&gt; Embed:SetImage( url: string,-- The url of the image proxy_url: string?,-- Proxy version of the url height: number?,-- The height of the image width: number?-- The width of the image ) → () Adds an image to the embed.  "},{"title":"RemoveImage​","type":1,"pageTitle":"Embed","url":"api/Embed#RemoveImage","content":"&lt;/&gt; Embed:RemoveImage() → () Removes the image  "},{"title":"SetThumbnail​","type":1,"pageTitle":"Embed","url":"api/Embed#SetThumbnail","content":"&lt;/&gt; Embed:SetThumbnail( url: string,-- The url of the thumbnail proxy_url: string?,-- Proxy version of the url height: number?,-- The height of the thumbnail width: number?-- The width of the thumbnail ) → () Adds a thumbnail to the embed.  "},{"title":"RemoveThumbnail​","type":1,"pageTitle":"Embed","url":"api/Embed#RemoveThumbnail","content":"&lt;/&gt; Embed:RemoveThumbnail() → () Removes the thumbnail.  "},{"title":"SetVideo​","type":1,"pageTitle":"Embed","url":"api/Embed#SetVideo","content":"&lt;/&gt; Embed:SetVideo( url: string,-- The url of the video proxy_url: string?,-- Proxy version of the url height: number?,-- The height of the video width: number?-- The width of the video ) → () Adds a video to the embed.  "},{"title":"RemoveVideo​","type":1,"pageTitle":"Embed","url":"api/Embed#RemoveVideo","content":"&lt;/&gt; Embed:RemoveVideo() → () Removes the video.  "},{"title":"SetProvider​","type":1,"pageTitle":"Embed","url":"api/Embed#SetProvider","content":"&lt;/&gt; Embed:SetProvider( name: string?,-- The name of the provider url: string?-- The url of the provider ) → () Sets the provider of the embed.  "},{"title":"RemoveProvider​","type":1,"pageTitle":"Embed","url":"api/Embed#RemoveProvider","content":"&lt;/&gt; Embed:RemoveProvider() → () Removes the provider from the embed.  "},{"title":"SetAuthor​","type":1,"pageTitle":"Embed","url":"api/Embed#SetAuthor","content":"&lt;/&gt; Embed:SetAuthor( name: string,-- Name of the author url: string?,-- Adds an url to author icon_url: string?-- Adds an image to the author ) → () Sets the author of the embed. "},{"title":"Errors","type":1,"pageTitle":"Embed","url":"api/Embed##","content":"Type\tDescription&quot;UrlFail&quot;\tSomething went wrong while checking the url  "},{"title":"RemoveAuthor​","type":1,"pageTitle":"Embed","url":"api/Embed#RemoveAuthor","content":"&lt;/&gt; Embed:RemoveAuthor() → () Removes the author from the embed.  "},{"title":"AddField​","type":1,"pageTitle":"Embed","url":"api/Embed#AddField","content":"&lt;/&gt; Embed:AddField( name: string,-- Field name value: string,-- Value of field inline: boolean?-- Should the field be inline? ) → () Adds a field to the embed.  "},{"title":"AppendField​","type":1,"pageTitle":"Embed","url":"api/Embed#AppendField","content":"&lt;/&gt; Embed:AppendField( field: EmbedField-- The field to add ) → () Allows you to add a custom field to the embed.  "},{"title":"InsertFieldAt​","type":1,"pageTitle":"Embed","url":"api/Embed#InsertFieldAt","content":"&lt;/&gt; Embed:InsertFieldAt( index: number,-- The index to insert it at name: string,-- Field name value: string,-- Value of field inline: boolean?-- Should the field be inline? ) → () Inserts a field at the given index.  "},{"title":"RemoveField​","type":1,"pageTitle":"Embed","url":"api/Embed#RemoveField","content":"&lt;/&gt; Embed:RemoveField( index: number-- The index to remove ) → () Removes a certain field.  "},{"title":"ClearFields​","type":1,"pageTitle":"Embed","url":"api/Embed#ClearFields","content":"&lt;/&gt; Embed:ClearFields() → () Removes all fields.  "},{"title":"CountCharacters​","type":1,"pageTitle":"Embed","url":"api/Embed#CountCharacters","content":"&lt;/&gt; Embed:CountCharacters() → ( number, {} )-- Returns the amount and the table containing the structure Counts all the characters in the embed "}]